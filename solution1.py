import numpy as np
xs = [1.49066127e-06, 1.00024454e-02, 2.00039718e-02, 3.00063867e-02,
     4.00101677e-02, 5.00160261e-02, 6.00250086e-02, 7.00386374e-02,
     8.00590993e-02, 9.00894983e-02, 1.00134185e-01, 1.10199182e-01,
     1.20292721e-01, 1.30425906e-01, 1.40613524e-01, 1.50874996e-01,
     1.61235486e-01, 1.71727136e-01, 1.82390409e-01, 1.93275480e-01,
     2.04443599e-01, 2.15968314e-01, 2.27936438e-01, 2.40448564e-01,
     2.53618982e-01, 2.67574773e-01, 2.82453905e-01, 2.98402141e-01,
     3.15568647e-01, 3.34100210e-01, 3.54134113e-01, 3.75789783e-01,
     3.99159480e-01, 4.24298431e-01, 4.51214920e-01, 4.79860987e-01,
     5.10124440e-01, 5.41822943e-01, 5.74700902e-01, 6.08429771e-01,
     6.42612264e-01, 6.76790724e-01, 7.10459615e-01, 7.43081815e-01,
     7.74108085e-01, 8.02998761e-01, 8.29246539e-01, 8.52398993e-01,
     8.72079469e-01, 8.88004992e-01, 9.00000000e-01, 9.08004992e-01,
     9.12079469e-01, 9.12398993e-01, 9.09246539e-01, 9.02998761e-01,
     8.94108085e-01, 8.83081815e-01, 8.70459615e-01, 8.56790724e-01,
     8.42612264e-01, 8.28429771e-01, 8.14700902e-01, 8.01822943e-01,
     7.90124440e-01, 7.79860987e-01, 7.71214920e-01, 7.64298431e-01,
     7.59159480e-01, 7.55789783e-01, 7.54134113e-01, 7.54100210e-01,
     7.55568647e-01, 7.58402141e-01, 7.62453905e-01, 7.67574773e-01,
     7.73618982e-01, 7.80448564e-01, 7.87936438e-01, 7.95968314e-01,
     8.04443599e-01, 8.13275480e-01, 8.22390409e-01, 8.31727136e-01,
     8.41235486e-01, 8.50874996e-01, 8.60613524e-01, 8.70425906e-01,
     8.80292721e-01, 8.90199182e-01, 9.00134185e-01, 9.10089498e-01,
     9.20059099e-01, 9.30038637e-01, 9.40025009e-01, 9.50016026e-01,
     9.60010168e-01, 9.70006387e-01, 9.80003972e-01, 9.90002445e-01]

ys = [3.72665317e-06, 6.11356797e-06, 9.92950431e-06, 1.59667839e-05,
     2.54193465e-05, 4.00652974e-05, 6.25215038e-05, 9.65934137e-05,
     1.47748360e-04, 2.23745794e-04, 3.35462628e-04, 4.97955422e-04,
     7.31802419e-04, 1.06476624e-03, 1.53381068e-03, 2.18749112e-03,
     3.08871541e-03, 4.31784001e-03, 5.97602290e-03, 8.18870101e-03,
     1.11089965e-02, 1.49207861e-02, 1.98410947e-02, 2.61214099e-02,
     3.40474547e-02, 4.39369336e-02, 5.61347628e-02, 7.10053537e-02,
     8.89216175e-02, 1.10250525e-01, 1.35335283e-01, 1.64474457e-01,
     1.97898699e-01, 2.35746077e-01, 2.78037300e-01, 3.24652467e-01,
     3.75311099e-01, 4.29557358e-01, 4.86752256e-01, 5.46074427e-01,
     6.06530660e-01, 6.66976811e-01, 7.26149037e-01, 7.82704538e-01,
     8.35270211e-01, 8.82496903e-01, 9.23116346e-01, 9.55997482e-01,
     9.80198673e-01, 9.95012479e-01, 1.00000000e+00, 9.95012479e-01,
     9.80198673e-01, 9.55997482e-01, 9.23116346e-01, 8.82496903e-01,
     8.35270211e-01, 7.82704538e-01, 7.26149037e-01, 6.66976811e-01,
     6.06530660e-01, 5.46074427e-01, 4.86752256e-01, 4.29557358e-01,
     3.75311099e-01, 3.24652467e-01, 2.78037300e-01, 2.35746077e-01,
     1.97898699e-01, 1.64474457e-01, 1.35335283e-01, 1.10250525e-01,
     8.89216175e-02, 7.10053537e-02, 5.61347628e-02, 4.39369336e-02,
     3.40474547e-02, 2.61214099e-02, 1.98410947e-02, 1.49207861e-02,
     1.11089965e-02, 8.18870101e-03, 5.97602290e-03, 4.31784001e-03,
     3.08871541e-03, 2.18749112e-03, 1.53381068e-03, 1.06476624e-03,
     7.31802419e-04, 4.97955422e-04, 3.35462628e-04, 2.23745794e-04,
     1.47748360e-04, 9.65934137e-05, 6.25215038e-05, 4.00652974e-05,
     2.54193465e-05, 1.59667839e-05, 9.92950431e-06, 6.11356797e-06]
left = -1
#Find ambigious region
for i in range(1, len(xs)):
    if xs[i] < xs[i - 1] and left == -1:
        left = i - 1
    if left != -1 and xs[i] > xs[i - 1]:
        right = i - 1
        break

def interpolate(x0, y0, x1, y1, x):
    dy = (y1 - y0)/((x1 - x0))
    return x, y0 + (x - x0) * dy

def area(xs, ys):
    ys.insert(0, ys[-1])
    ys.append(ys[1])
    sum_ = 0
    for i in range(1, len(ys) - 1):
        sum_ += xs[i - 1]*(ys[i + 1] - ys[i - 1])
    return 1/2 * abs(sum_)
def diff(middle):
    nums = []
    for j in range(1, left + 1):
        if xs[j] >= middle and xs[j - 1] < middle:
            nums.append(j - 1)
            break
    for j in range(right + 1, len(xs)):
        if xs[j] >= middle and xs[j - 1] < middle:
            nums.append(j - 1)
            break
    for j in range(left, right + 1):
        if xs[j] <= middle and xs[j - 1] > middle:
            nums.append(j - 1)
            break
    tmp_x, tmp_y = interpolate(xs[nums[0]], ys[nums[0]], xs[nums[0] + 1], ys[nums[0] + 1], middle)
    tmp_x1, tmp_y1 = interpolate(xs[nums[1]], ys[nums[1]], xs[nums[0] + 1], ys[nums[0] + 1], middle)
    tmp_x2, tmp_y2 = interpolate(xs[nums[2]], ys[nums[2]], xs[nums[2] + 1], ys[nums[2] + 1], middle)
    first_area = area([tmp_x] + xs[nums[0] + 1:nums[2] + 1] + [tmp_x2], [tmp_y] + ys[nums[0] + 1:nums[2] + 1] + [tmp_y2])
    second_area = area(([tmp_x2] + xs[nums[2] + 1:nums[1]] + [tmp_x1])[::-1], ([tmp_y2] + ys[nums[2] + 1:nums[1]] + [tmp_y1])[::-1])
    diff = first_area - second_area
    return diff
print(diff(0.8224013728092834))

left_x = xs[right]
right_x = xs[left]
differ = 1000
#Bin search point with min diff in areas
while right_x - left_x > 1e-8:
    middle = (right_x + left_x) / 2
    print('Left, right: ', left_x, right_x)
    differ = diff(middle)
    print('Diff: ', differ)
    if differ > 0:
        left_x = middle
    else:
        right_x = middle
print("Best point is:", right_x) 

